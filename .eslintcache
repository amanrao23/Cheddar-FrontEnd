[{"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/index.js":"1","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/App.js":"2","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/store.js":"3","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/actions/auth.js":"4","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/actions/types.js":"5","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/utils/setAuthToken.js":"6","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/layout/Navbar.js":"7","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/layout/Alert.js":"8","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/layout/Landing.js":"9","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/auth/Login.js":"10","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/auth/Register.js":"11","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/routing/PrivateRoute.js":"12","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/chat/Chat.js":"13","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/actions/alert.js":"14","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/auth/LoginComp.js":"15","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/auth/RegisterComp.js":"16","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/socketConfig.js":"17","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/actions/chat.js":"18","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/chat/ChatComp.js":"19","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/reducers/index.js":"20","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/chat/ConversationWindow.js":"21","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/chat/Conversations.js":"22","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/chat/ChatNavbar.js":"23","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/reducers/alert.js":"24","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/reducers/auth.js":"25","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/reducers/chat.js":"26","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/chat/ConversationsComp.js":"27","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/chat/ConversationWindowComp.js":"28","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/chat/ChatNav.js":"29","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/chat/NewConversation.js":"30","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/layout/Cheese.js":"31","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/chat/NewConversationComp.js":"32","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/layout/UserNav.js":"33","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/layout/GuestNav.js":"34"},{"size":412,"mtime":1611561004938,"results":"35","hashOfConfig":"36"},{"size":1757,"mtime":1613833581344,"results":"37","hashOfConfig":"36"},{"size":1020,"mtime":1611559052277,"results":"38","hashOfConfig":"36"},{"size":1860,"mtime":1614061256886,"results":"39","hashOfConfig":"36"},{"size":1694,"mtime":1614248118272,"results":"40","hashOfConfig":"36"},{"size":326,"mtime":1613656848213,"results":"41","hashOfConfig":"36"},{"size":739,"mtime":1614241253435,"results":"42","hashOfConfig":"36"},{"size":439,"mtime":1611568033707,"results":"43","hashOfConfig":"36"},{"size":1099,"mtime":1613833581344,"results":"44","hashOfConfig":"36"},{"size":980,"mtime":1613717137960,"results":"45","hashOfConfig":"36"},{"size":1526,"mtime":1614056725935,"results":"46","hashOfConfig":"36"},{"size":702,"mtime":1613656958392,"results":"47","hashOfConfig":"36"},{"size":2325,"mtime":1614248317838,"results":"48","hashOfConfig":"36"},{"size":344,"mtime":1611560345132,"results":"49","hashOfConfig":"36"},{"size":3572,"mtime":1614248657982,"results":"50","hashOfConfig":"36"},{"size":4665,"mtime":1614248648271,"results":"51","hashOfConfig":"36"},{"size":232,"mtime":1614062632598,"results":"52","hashOfConfig":"36"},{"size":4433,"mtime":1614248058037,"results":"53","hashOfConfig":"36"},{"size":1151,"mtime":1614235365374,"results":"54","hashOfConfig":"36"},{"size":188,"mtime":1613676975123,"results":"55","hashOfConfig":"36"},{"size":2039,"mtime":1614250335768,"results":"56","hashOfConfig":"36"},{"size":991,"mtime":1614247341320,"results":"57","hashOfConfig":"36"},{"size":477,"mtime":1614250946340,"results":"58","hashOfConfig":"36"},{"size":402,"mtime":1611560521952,"results":"59","hashOfConfig":"36"},{"size":1079,"mtime":1613838416226,"results":"60","hashOfConfig":"36"},{"size":3773,"mtime":1614248189311,"results":"61","hashOfConfig":"36"},{"size":3146,"mtime":1614247357808,"results":"62","hashOfConfig":"36"},{"size":8850,"mtime":1614249259361,"results":"63","hashOfConfig":"36"},{"size":1019,"mtime":1614251371045,"results":"64","hashOfConfig":"36"},{"size":919,"mtime":1614056725935,"results":"65","hashOfConfig":"36"},{"size":342,"mtime":1614235365378,"results":"66","hashOfConfig":"36"},{"size":1370,"mtime":1614235365378,"results":"67","hashOfConfig":"36"},{"size":3402,"mtime":1614248517208,"results":"68","hashOfConfig":"36"},{"size":3347,"mtime":1614242168216,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"1vfk2tk",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"72"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"72"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"72"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"72"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"72"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"72"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"72"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/index.js",[],["152","153"],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/App.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/store.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/actions/auth.js",["154"],"// import api from '../utils/api';\nimport axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\n\nimport { setAlert } from './alert';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_CHAT,\n} from './types';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  try {\n   \n    if(localStorage.token){\n      setAuthToken(localStorage.token)\n  }\n const res = await axios.get('/api/auth');\n   \n    console.log('load_user()', res.data);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.log('Load_use()', err);\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n// Register User\nexport const register = formData => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    const res = await axios.post('/api/user', formData, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data,\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n\n// Login User\nexport const login = (body) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  \n\n  try {\n    console.log('hi')\n    const res = await axios.post('/api/auth', body, config);\n\n    // const res={data:'hi'}\n    console.log(res.data)\n    await dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    console.log(err);\n    \n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\n// Logout\nexport const logout = () => ({ type:CLEAR_CHAT, type: LOGOUT });\n","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/actions/types.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/utils/setAuthToken.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/layout/Navbar.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/layout/Alert.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/layout/Landing.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/auth/Login.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/auth/Register.js",["155"],"import React, { Fragment, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { setAlert } from '../../actions/alert';\nimport { register } from '../../actions/auth';\nimport PropTypes from 'prop-types';\nimport RegisterComp from \"../../components/auth/RegisterComp\";\n\nconst Register = ({ setAlert, register, isAuthenticated }) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    username:'',\n    email: '',\n    password: '',\n    password2: '',\n\n  });\n\n  const { name,username, email, password, password2 } = formData;\n\n  const onChange = e =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    if (password !== password2) {\n      setAlert('Passwords do not match', 'danger');\n    } else {\n      register({ name,username, email, password});\n      console.log('fjhdjh');\n    }\n  };\n\n  if (isAuthenticated) {\n    return <Redirect to='/chat' />;\n  }\n\n  return (\n    <Fragment>\n      <div className=\"\">\n        <RegisterComp\n          onChange={onChange}\n          onSubmit={onSubmit}\n          formData={formData}\n        />\n      </div>\n    </Fragment>\n\n  );\n};\n\nRegister.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  register: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool,\n  \n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { setAlert, register})(Register);\n","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/routing/PrivateRoute.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/chat/Chat.js",["156","157","158","159","160","161","162"],"import React, { useEffect } from 'react';\nimport ChatComp from '../../components/chat/ChatComp';\nimport {\n  getConversations,\n  addConversation,\n  addEvent,\n  addNotification,\n  addOnline,\n  setTyping,\n  clearTyping,\n} from '../../actions/chat';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport socket from '../../socketConfig';\n\nconst Chat = ({\n  getConversations,\n  addConversation,\n  auth,\n  chat,\n  addEvent,\n  addNotification,\n  addOnline,\n  setTyping,\n  clearTyping,\n}) => {\n  const username = auth.user.username;\n  const conversations = chat.conversations;\n  useEffect(() => {\n    if (auth.user.username !== undefined) {\n      getConversations();\n    }\n  }, [auth]);\n\n  useEffect(() => {\n    if (auth.user.username !== undefined && conversations.length > 0) {\n      socket.emit('join', { username, conversations }, error => {\n        if (error) {\n          alert(error);\n        }\n      });\n    }\n  }, [auth, chat.conversations]);\n\n  useEffect(() => {\n    console.log('Hi', chat.conversation);\n    socket.on('newEvent', ({ event }) => {\n      // console.log(event, \"socket newMessage\");\n      // console.log(event._id, \"eventid\");\n      // console.log(chat, \"hey man comonnnnn\");\n      chat.conversation && chat.conversation._id === event.chatRoomId\n        ? addEvent(event)\n        : addNotification(event.chatRoomId);\n      //send notification of new event\n    });\n  }, [chat.conversation]);\n  useEffect(() => {\n    socket.on('newConversation', ({ newConvo }) => {\n      console.log(newConvo, 'new conversation');\n      addConversation(newConvo);\n    });\n  }, []);\n  useEffect(() => {\n    socket.on('online', ({ userStatus }) => {\n      console.log(userStatus, 'new online id');\n      addOnline(userStatus);\n    });\n  }, []);\n  useEffect(() => {\n    socket.on('showTyping', ({ chatRoomId }) => {\n      // I will call it and set Timeout and call someting to clear typing\n\n      console.log('typing');\n      setTyping(chatRoomId);\n      setTimeout(() => {\n        clearTyping();\n      }, 3000);\n    });\n  }, []);\n  return <ChatComp />;\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  chat: state.chat,\n});\n\nexport default connect(mapStateToProps, {\n  getConversations,\n  addConversation,\n  addEvent,\n  addNotification,\n  addOnline,\n  setTyping,\n  clearTyping,\n})(Chat);\n","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/actions/alert.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/auth/LoginComp.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/auth/RegisterComp.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/socketConfig.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/actions/chat.js",["163"],"// import api from '../utils/api';\nimport axios from 'axios';\n\nimport { setAlert } from './alert';\nimport {\n  GET_CONVERSATIONS,\n  GET_CONVERSATIONS_ERROR,\n  NEW_CONVERSATION,\n  NEW_CONVERSATION_ERROR,\n  SET_CONVERSATION,\n  SET_CONVERSATION_ERROR,\n  GET_EVENTS,\n  GET_EVENTS_ERROR,\n  NEW_EVENT,\n  NEW_EVENT_ERROR,\n  ADD_CONVERSATION,\n  ADD_CONVERSATION_ERROR,\n  ADD_EVENT_ERROR,\n  ADD_EVENT,\n  ADD_NOTIFICATION,\n  ADD_NOTIFICATION_ERROR,\n  ADD_ONLINE,\n  ADD_OFFLINE,\n  ADD_STATUS_ERROR,\n  CLEAR_TYPING,\n  CLEAR_TYPING_ERROR,\n  SET_TYPING,\n  SET_TYPING_ERROR\n} from './types';\n\n// Load User\nexport const getConversations = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/user/conversations');\n    console.log('load_user()', res.data);\n    dispatch({\n      type: GET_CONVERSATIONS,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.log('Load_use()', err);\n    dispatch({\n      type: GET_CONVERSATIONS_ERROR,\n    });\n  }\n};\n\nexport const newConversation = body => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    const res = await axios.post('/api/user/newConversation', body, config);\n\n    console.log('load_user()', res.data);\n    dispatch({\n      type: NEW_CONVERSATION,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.log('Load_use()', err);\n    dispatch({\n      type: NEW_CONVERSATION_ERROR,\n    });\n  }\n};\n\nexport const setConversation = conversation => async dispatch => {\n  try {\n    dispatch({\n      type: SET_CONVERSATION,\n      payload: conversation,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: SET_CONVERSATION_ERROR,\n    });\n  }\n};\n\nexport const getEvents = (chatId, username) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  const timestamp = null;\n  const body = { chatRoomId: chatId, timestamp: timestamp, username: username };\n  console.log(body);\n\n  try {\n    const res = await axios.post('/api/event/getEvents', body, config);\n    console.log(res.data);\n    dispatch({\n      type: GET_EVENTS,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: GET_EVENTS_ERROR,\n    });\n  }\n};\n\nexport const newEvent = body => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  console.log(body, 'In newEvent jiiiiiiiiiiii');\n  try {\n    const res = await axios.post('/api/event/newEvent', body, config);\n    //socket event\n\n    dispatch({\n      type: NEW_EVENT,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: NEW_EVENT_ERROR,\n    });\n  }\n};\n\nexport const addConversation = body => async dispatch => {\n  console.log('In add Conversation ');\n  try {\n    dispatch({\n      type: ADD_CONVERSATION,\n      payload: body,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: ADD_CONVERSATION_ERROR,\n    });\n  }\n};\nexport const addEvent = body => async dispatch => {\n  try {\n    dispatch({\n      type: ADD_EVENT,\n      payload: body,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: ADD_EVENT_ERROR,\n    });\n  }\n};\n\nexport const addNotification = body => async dispatch => {\n  try {\n    dispatch({\n      type: ADD_NOTIFICATION,\n      payload: body,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: ADD_NOTIFICATION_ERROR,\n    });\n  }\n};\n\nexport const addOnline = body => async dispatch => {\n  try {\n    dispatch({\n      type: ADD_ONLINE,\n      payload: body,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: ADD_STATUS_ERROR,\n    });\n  }\n};\n\nexport const addOffline = body => async dispatch => {\n  try {\n    dispatch({\n      type: ADD_OFFLINE,\n      payload: body,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: ADD_STATUS_ERROR,\n    });\n  }\n};\n\nexport const setTyping = chatRoomId => async dispatch => {\n  try {\n    dispatch({\n      type: SET_TYPING,\n      payload: chatRoomId,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: SET_TYPING_ERROR,\n    });\n  }\n};\nexport const clearTyping = chatRoomId => async dispatch => {\n  try {\n    dispatch({\n      type: CLEAR_TYPING,\n      payload: chatRoomId,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: CLEAR_TYPING_ERROR,\n    });\n  }\n};\n","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/chat/ChatComp.js",["164"],"import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Conversations from \"../../containers/chat/Conversations\";\nimport ConversationWindow from \"../../containers/chat/ConversationWindow\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ChatNavbar from \"../../containers/chat/ChatNavbar\";\nimport { Grid, List, ListItem } from \"@material-ui/core\";\nconst useStyles = makeStyles({\n  chatSection: {\n    width: \"100%\",\n    height: \"80vh\",\n  },\n  window: {\n    border: \"1px solid #cccccc\",\n    borderRadius: 10,\n  },\n});\nconst ChatComp = (props) => {\n  const classes = useStyles();\n  return (\n    <div>\n      <Grid container>\n        {/* <Grid item xs={12} >\n                <Typography variant=\"h5\" className=\"header-message\">Chat</Typography>\n            </Grid> */}\n      </Grid>\n      <Grid container component={Paper} className={classes.chatSection}>\n        <Conversations />\n        <div className={classes.window}>\n          <List>\n            <ChatNavbar />\n            <ConversationWindow />\n          </List>\n        </div>\n      </Grid>\n    </div>\n  );\n};\n\nChatComp.propTypes = {};\n\nexport default ChatComp;\n","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/reducers/index.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/chat/ConversationWindow.js",["165","166","167","168"],"import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport ConversationWindowComp from '../../components/chat/ConversationWindowComp';\nimport { connect } from 'react-redux';\nimport { newEvent } from '../../actions/chat';\nimport socket from '../../socketConfig';\n\nfunction ConversationWindow({ chat, newEvent, auth }) {\n  const [formData, setFormData] = useState({\n    text: '',\n  });\n\n  const onChange = e => setFormData({ ...formData, text: e.target.value });\n\n  const showTyping = () => {\n    if (chat.conversation !== null) {\n      let chatRoomId = chat.conversation._id;\n\n      socket.emit('typing', { chatRoomId });\n    }\n  };\n\n  const onSubmit = () => {\n    formData.chatRoomId = chat.conversation._id;\n    formData.messageId = chat.events.length + 1;\n    formData.type = 'new';\n\n    console.log(chat.events.length, 'length');\n    newEvent(formData);\n    const { text, chatRoomId } = formData;\n\n    // socket.emit('newEvent', {formData});\n    setFormData({ ...formData, text: '' });\n  };\n  const editEvent = (text, eventPre) => {\n    const event = {};\n    console.log(text, eventPre);\n    event.chatRoomId = eventPre.chatRoomId;\n    event.messageId = eventPre.messageId;\n    event.type = 'edit';\n    event.text = text;\n    newEvent(event);\n  };\n  const deleteEvent = eventPre => {\n    const event = {};\n    event.chatRoomId = eventPre.chatRoomId;\n    event.messageId = eventPre.messageId;\n    event.type = 'delete';\n    event.text = 'This message was deleted';\n    console.log(event, 'In sumbit delte event');\n    newEvent(event);\n  };\n  return (\n    <ConversationWindowComp\n      events={chat.events}\n      conversation={chat.conversation}\n      formData={formData}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      auth={auth}\n      deleteEvent={deleteEvent}\n      editEvent={editEvent}\n      showTyping={showTyping}\n    />\n  );\n}\n\nconst mapStateToProps = state => ({\n  chat: state.chat,\n  auth: state.auth,\n});\nexport default connect(mapStateToProps, { newEvent })(ConversationWindow);\n","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/chat/Conversations.js",["169"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ConversationsComp from \"../../components/chat/ConversationsComp\";\nimport { connect } from \"react-redux\";\nimport { setConversation, getEvents } from \"../../actions/chat\";\nfunction Conversations({ chat, auth, setConversation, getEvents }) {\n  const onClick = (conversation) => {\n    const username =\n      conversation.recipients[0].username === auth.user.username\n        ? conversation.recipients[1].username\n        : conversation.recipients[0].name;\n        \n    setConversation(conversation);\n    getEvents(conversation._id, username);\n  };\n  return (\n    <ConversationsComp\n      conversations={chat.conversations}\n      auth={auth}\n      onClick={onClick}\n      notifications={chat.notifications}\n    />\n  );\n}\n\nConversations.propTypes = {};\nconst mapStateToProps = (state) => ({\n  chat: state.chat,\n  auth: state.auth,\n});\nexport default connect(mapStateToProps, { setConversation, getEvents })(\n  Conversations\n);\n","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/chat/ChatNavbar.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/reducers/alert.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/reducers/auth.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/reducers/chat.js",["170"],"import {\n  NEW_CONVERSATION,\n  GET_CONVERSATIONS,\n  SET_CONVERSATION,\n  GET_EVENTS,\n  NEW_EVENT,\n  ADD_CONVERSATION,\n  ADD_EVENT,\n  CLEAR_CHAT,\n  ADD_NOTIFICATION,\n  ADD_ONLINE,\n  ADD_OFFLINE,\n  SET_TYPING,\n  CLEAR_TYPING\n} from \"../actions/types\";\n\nconst initialState = {\n  conversations: [],\n  conversation: null,\n  events: [],\n  newEvents: [],\n  loading: true,\n  notifications: [],\n  onlineUser: \"offline\",\n  typing:null,\n};\n\nfunction chatReducer(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_CONVERSATIONS:\n      return {\n        ...state,\n        conversations: payload,\n        loading: false,\n      };\n    case SET_CONVERSATION: {\n      state.notifications = state.notifications.filter(\n        (notification) => notification !== payload._id\n      );\n      return {\n        ...state,\n        conversation: payload,\n        loading: false,\n        onlineUser: \"offline\",\n      };\n    }\n    case NEW_CONVERSATION: {\n      state.conversations = state.conversations.filter(\n        (conversation) => conversation._id !== payload._id\n      );\n      console.log(payload);\n      return {\n        ...state,\n        conversations: [payload, ...state.conversations],\n        loading: false,\n      };\n    }\n    case GET_EVENTS: {\n      payload.sort((a, b) =>\n        a.messageId > b.messageId ? 1 : b.messageId > a.messageId ? -1 : 0\n      );\n      return {\n        ...state,\n        events: payload,\n        loading: false,\n        // whenever he refreshes this should get called\n      };\n    }\n    case NEW_EVENT: {\n      // reducer newEvents -> events\n      console.log(payload, \"In redcer of delete event\");\n\n      if (payload.type !== \"new\") {\n        console.log(\"Edit/Delete\");\n        console.log(state.events, \"1stt\");\n        state.events[payload.messageId - 1] = payload;\n        console.log(state.events, \"2ndd\");\n        return {\n          ...state,\n        };\n      } else {\n        return {\n          ...state,\n          events: [...state.events, payload],\n        };\n      }\n    }\n    case ADD_CONVERSATION: {\n      console.log(payload);\n      return {\n        ...state,\n        conversations: [payload, ...state.conversations],\n      };\n    }\n    case ADD_EVENT: {\n      // filter if not type == new\n      console.log(payload);\n      if(payload.chatRoomId===state.conversation._id){\n      if (payload.type !== \"new\") {\n        console.log(\"Edit/Delete\");\n        state.events[payload.messageId - 1] = payload;\n        return {\n          ...state,\n        };\n      } else {\n        return {\n          ...state,\n          events: [...state.events, payload],\n        };\n      }\n    }\n    else{\n      return{\n        ...state,\n      }\n    }\n    }\n    case ADD_NOTIFICATION: {\n      const notifiedConvo = state.conversations.filter(\n        (convo) => convo._id === payload\n      );\n      state.conversations = state.conversations.filter(\n        (convo) => convo._id !== payload\n      );\n      state.notifications = state.notifications.filter(\n        (notification) => notification !== payload\n      );\n      return {\n        ...state,\n        notifications: [payload, ...state.notifications],\n        conversations: [notifiedConvo[0], ...state.conversations],\n      };\n    }\n    case ADD_ONLINE: {\n      return {\n        ...state,\n        onlineUser: payload,\n      };\n    }\n    case SET_TYPING: {\n      return {\n        ...state,\n        typing: payload,\n      };\n    }\n    case CLEAR_TYPING: {\n      return {\n        ...state,\n        typing: null,\n      };\n    }\n    case CLEAR_CHAT: {\n      return {\n        conversations: [],\n        conversation: null,\n        events: [],\n        newEvents: [],\n        loading: true,\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default chatReducer;\n","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/chat/ConversationsComp.js",["171","172","173"],"import React, { Fragment } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport green from \"@material-ui/core/colors/green\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Grid,\n  List,\n  ListItem,\n  Avatar,\n  Divider,\n  ListItemText,\n  ListItemIcon,\n} from \"@material-ui/core\";\nimport NewConversation from \"../../containers/chat/NewConversation\";\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\";\nconst useStyles = makeStyles({\n  textColor: {\n    color: \"white\",\n    fontSize: 25,\n    margin: 10,\n  },\n  dm: {\n    color: \"white\",\n    fontSize: 15,\n    marginTop: 50,\n    marginLeft: 10,\n  },\n  borderRight500: {\n    borderRight: \"1px solid white\",\n    backgroundColor: \"#4A154B\",\n    borderRadius: 10,\n  },\n  hover: {\n    color: \"white\",\n    fontSize: 25,\n    margin: 2,\n\n    \"&:hover\": {\n      backgroundColor: \"#a765a8\",\n    },\n  },\n});\n\nconst ConversationsComp = ({ conversations, auth, onClick,notifications }) => {\n  const classes = useStyles();\n\n  return (\n    <Fragment>\n      <Grid item xs={2} className={classes.borderRight500}>\n        \n        <Typography className={classes.textColor}>\n          {\" \"}\n          {auth.user.username}\n        </Typography>\n\n        <Divider />\n        {/* search bar  */}\n        <Grid container spacing={2}>\n          <NewConversation />\n        </Grid>\n        <Divider />\n\n        <Typography className={classes.dm}>Direct Messages</Typography>\n        {/* conversations */}\n        {!conversations && <center></center>}\n\n        <List>\n          {conversations.length > 0 ? (\n            conversations.map(\n              (conversation) =>\n                conversation.recipients !== undefined && (\n                  <ListItem\n                    button\n                    className={classes.hover}\n                    onClick={() => {\n                      onClick(conversation);\n                    }}\n                  >\n                    <ListItemText>\n                      {conversation.recipients[0].username ===\n                      auth.user.username\n                        ? conversation.recipients[1].username\n                        : conversation.recipients[0].name}\n                    </ListItemText>\n                    <ListItemText align=\"right\">\n                      <FiberManualRecordIcon\n                        style={{ fontSize: 20, color: green[500] }}\n                      />\n                    </ListItemText>\n                  </ListItem>\n                )\n            )\n          ) : (\n            <h4></h4>\n          )}\n        </List>\n      </Grid>\n    </Fragment>\n  );\n};\n\nConversationsComp.propTypes = {};\n\nexport default ConversationsComp;\n\n//  <ListItem button key='Alice'>\n\n/* <ListItemIcon>\n<Avatar\n  alt='Alice'\n  src='https://material-ui.com/static/images/avatar/3.jpg'\n/>\n</ListItemIcon>\n<ListItemText primary='Alice'>Alice</ListItemText>\n</ListItem>\n<ListItem button key='CindyBaker'>\n<ListItemIcon>\n<Avatar\n  alt='Cindy Baker'\n  src='https://material-ui.com/static/images/avatar/2.jpg'\n/>\n</ListItemIcon>\n<ListItemText primary='Cindy Baker'>Cindy Baker</ListItemText>\n</ListItem> */\n","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/chat/ConversationWindowComp.js",["174","175","176"],"import React, { Fragment, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport moment from \"moment\";\nimport Typography from \"@material-ui/core/Typography\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Cheese from \"../layout/Cheese\";\nimport {\n  Grid,\n  List,\n  ListItem,\n  Divider,\n  ListItemText,\n  TextField,\n  Fab,\n  Button,\n  Dialog,\n  DialogTitle,\n} from \"@material-ui/core\";\nimport SendIcon from \"@material-ui/icons/Send\";\n\nconst useStyles = makeStyles({\n  messageArea: {\n    height: \"50vh\",\n    overflowY: \"auto\",\n    border: \"1px solid #f7f5f5\",\n  },\n  hoverMessage: {\n    padding: 10,\n    marginRight: \"10%\",\n    marginTop: \"1%\",\n    background: \"light\",\n\n    \"&:hover\": {\n      backgroundColor: \"#f7f5f5\",\n    },\n  },\n  editButton: {\n    color: \"green\",\n  },\n  deleteButton: {\n    color: \"red\",\n  },\n\n  time: {\n    position: \"relative\",\n    top: 6,\n  },\n});\n\nconst ConversationWindowComp = ({\n  events,\n  conversation,\n  auth,\n  onChange,\n  onSubmit,\n  formData,\n  editEvent,\n  deleteEvent,\n  showTyping\n}) => {\n  const classes = useStyles();\n  const { text } = formData;\n  const [openEdit, setOpenEdit] = React.useState({\n    open: false,\n    singleEvent: null,\n    editText: \"\",\n  });\n\n  const handleClickOpenEdit = (singleEventProp) => {\n    console.log(singleEventProp.text);\n    setOpenEdit({\n      ...openEdit,\n      open: true,\n      singleEvent: singleEventProp,\n      editText: singleEventProp.text,\n    });\n  };\n  const onChangeEditText = (e) => {\n    console.log(openEdit.editText);\n    setOpenEdit({ ...openEdit, editText: e.target.value });\n  };\n\n  const handleCloseEdit = () => {\n    setOpenEdit({ ...openEdit, open: false });\n  };\n  const [openDelete, setOpenDelete] = React.useState({\n    open: false,\n    singleEvent: null,\n  });\n\n  const handleClickOpenDelete = (singleEvent) => {\n    setOpenDelete({ ...openDelete, open: true, singleEvent: singleEvent });\n  };\n\n  const handleCloseDelete = () => {\n    setOpenDelete({ ...openDelete, open: false });\n  };\n  if (conversation) {\n    return (\n      <Fragment>\n        <Grid item xs={12}>\n          <List className={classes.messageArea}>\n            {events.map((event) => (\n              <Grid container className={classes.hoverMessage}>\n                <Grid item xs={9}>\n                  <Grid container>\n                    <Grid item xs={1}>\n                      <ListItemText>\n                        <Typography gutterBottom variant=\"h7\" component=\"h3\">\n                          {conversation.recipients[0]._id === event.sender\n                            ? conversation.recipients[0].username\n                            : conversation.recipients[1].username}\n                        </Typography>\n                      </ListItemText>\n                    </Grid>\n                    <Grid item xs={2}>\n                      <ListItemText\n                        align=\"left\"\n                        className={classes.time}\n                        secondary={moment(event.date).format(\"LT\")}\n                      ></ListItemText>\n                    </Grid>\n                  </Grid>\n                  <Typography gutterBottom variant=\"h7\">\n                    {event.text}\n                  </Typography>\n                </Grid>\n                <Grid item xs={2}>\n                  {event.sender === auth.user._id && (\n                    <Fragment>\n                      <Grid container>\n                        <Grid item xs={1}>\n                          <ListItemText>\n                            <Button\n                              className={classes.editButton}\n                              onClick={() => handleClickOpenEdit(event)}\n                            >\n                              <EditIcon />\n                            </Button>\n                          </ListItemText>\n                        </Grid>\n                        <Grid item xs={1}>\n                          <ListItemText>\n                            {\" \"}\n                          </ListItemText>\n                        </Grid>\n                        <Grid item xs={1}>\n                          <ListItemText>\n                            <Button\n                              className={classes.deleteButton}\n                              onClick={() => handleClickOpenDelete(event)}\n                            >\n                              <DeleteIcon />\n                            </Button>\n                          </ListItemText>\n                        </Grid>\n                      </Grid>\n                    </Fragment>\n                  )}\n                </Grid>\n              </Grid>\n            ))}\n            <Dialog\n              onClose={handleCloseDelete}\n              aria-labelledby=\"customized-dialog-title\"\n              open={openDelete.open}\n            >\n              <DialogTitle\n                id=\"customized-dialog-title\"\n                onClose={handleCloseDelete}\n              >\n                <h4>Delete this Message?</h4>\n                {/* {console.log()} */}\n                <Button\n                  onClick={() => {\n                    deleteEvent(openDelete.singleEvent);\n                  }}\n                >\n                  {\" \"}\n                  Confirm\n                </Button>\n              </DialogTitle>\n            </Dialog>\n            <Dialog\n              onClose={handleCloseEdit}\n              aria-labelledby=\"customized-dialog-title\"\n              open={openEdit.open}\n            >\n              <DialogTitle\n                id=\"customized-dialog-title\"\n                onClose={handleCloseEdit}\n              >\n                Edit this Message\n                <Grid container style={{ padding: \"12px\" }}>\n                  <Grid item xs={10}>\n                    <TextField\n                      id=\"outlined-basic-email\"\n                      fullWidth\n                      value={openEdit.editText}\n                      onChange={onChangeEditText}\n                    ></TextField>\n                  </Grid>\n                  <Grid xs={1} align=\"right\">\n                    <Fab\n                      color=\"primary\"\n                      aria-label=\"add\"\n                      onClick={() => {\n                        editEvent(openEdit.editText, openEdit.singleEvent);\n                      }}\n                    >\n                      <SendIcon />\n                    </Fab>\n                  </Grid>\n                </Grid>\n              </DialogTitle>\n            </Dialog>\n            {/* <ListItem key='1'>\n              <Grid container>\n                <Grid item xs={12}>\n                  <ListItemText\n                    align='right'\n                    primary=\"Hey man, What's up ?\"\n                  ></ListItemText>\n                </Grid>\n                <Grid item xs={12}>\n                  <ListItemText align='right' secondary='09:30'></ListItemText>\n                </Grid>\n              </Grid>\n            </ListItem> */}\n            {/* <ListItem key='2'>\n              <Grid container>\n                <Grid item xs={12}>\n                  <ListItemText\n                    align='left'\n                    primary='Hey, Iam Good! What about you ?'\n                  ></ListItemText>\n                </Grid>\n                <Grid item xs={12}>\n                  <ListItemText align='left' secondary='09:31'></ListItemText>\n                </Grid>\n              </Grid>\n            </ListItem> */}\n            {/* <ListItem key='3'>\n              <Grid container>\n                <Grid item xs={12}>\n                  <ListItemText\n                    align='right'\n                    primary=\"Cool. i am good, let's catch up!\"\n                  ></ListItemText>\n                </Grid>\n                <Grid item xs={12}>\n                  <ListItemText align='right' secondary='10:30'></ListItemText>\n                </Grid>\n              </Grid>\n            </ListItem> */}\n          </List>\n          <Divider />\n          <Grid container >\n            <Grid item xs={11}>\n              <TextField\n                id=\"outlined-basic-email\"\n                label=\"Type Something\"\n                fullWidth\n                value={text}\n                onChange={onChange}\n                onKeyPress={showTyping}\n              ></TextField>\n            </Grid>\n            <Grid xs={1} align=\"right\">\n              <Fab\n                color=\"primary\"\n                aria-label=\"add\"\n                onClick={() => {\n                  onSubmit();\n                }}\n              >\n                <SendIcon />\n              </Fab>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Fragment>\n    );\n  } else {\n    return <Cheese />;\n  }\n};\n\nConversationWindowComp.propTypes = {};\n\nexport default ConversationWindowComp;\n","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/chat/ChatNav.js",["177"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  grow: {\n    width: 800,\n    height: 70,\n    background: '#4A154B',\n    color: 'white',\n    marginTop: -10,\n    borderTopLeftRadius: 10,\n    borderTopRightRadius: 10,\n    color: 'white',\n    fontSize: 25,\n    padding: 5,\n  },\n}));\nexport default function UserNav({ conversation, auth, online, typing }) {\n  const classes = useStyles();\n\n  if (conversation !== null)\n    return (\n      <div className={classes.grow}>\n        {conversation.recipients[0].username === auth.user.username\n          ? conversation.recipients[1].username\n          : conversation.recipients[0].name}\n        {/* {typing===conversation._id&&<p>r</p>}\n      {} */}\n        <Typography>\n          {online} {conversation._id === typing && <span>typing...</span>}\n        </Typography>\n      </div>\n    );\n  else return <div className={classes.grow}>Cheddar</div>;\n}\n","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/containers/chat/NewConversation.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/layout/Cheese.js",[],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/chat/NewConversationComp.js",[],["178","179"],"/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/layout/UserNav.js",["180","181","182"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Link } from \"react-router-dom\";\nimport ConfirmationNumberIcon from \"@material-ui/icons/ConfirmationNumber\";\nimport Button from \"@material-ui/core/Button\";\nconst useStyles = makeStyles((theme) => ({\n  grow: {\n    flexGrow: 1,\n    background: \"#4A154B\",\n\n  },\n  color : {\n\n    background : '#000',\n},\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    display: \"none\",\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\",\n    },\n  },\n\n  inputRoot: {\n    color: \"inherit\",\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"md\")]: {\n      width: \"20ch\",\n    },\n  },\n  sectionDesktop: {\n    display: \"none\",\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"flex\",\n    },\n  },\n  sectionMobile: {\n    display: \"flex\",\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"none\",\n    },\n  },\n}));\n\nexport default function UserNav({ logout }) {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const isMenuOpen = Boolean(anchorEl);\n\n  const handleProfileMenuOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  const menuId = \"primary-search-account-menu\";\n  const renderMenu = (\n    <Menu\n      anchorEl={anchorEl}\n      anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      id={menuId}\n      keepMounted\n      transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      open={isMenuOpen}\n      onClose={handleMenuClose}\n    >\n      <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\n      <MenuItem onClick={handleMenuClose}>\n        <Button onClick={logout}>Logout</Button>\n      </MenuItem>\n    </Menu>\n  );\n\n  return (\n    <div className={classes.grow}>\n      <AppBar className={classes.color} position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Cheddar\n          </Typography>\n\n          <div className={classes.grow} />\n          <div className={classes.sectionDesktop}>\n            \n            <IconButton\n              edge=\"end\"\n              aria-label=\"account of current user\"\n              aria-controls={menuId}\n              aria-haspopup=\"true\"\n              onClick={handleProfileMenuOpen}\n              color=\"inherit\"\n            >\n              <AccountCircle />\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n      {renderMenu}\n    </div>\n  );\n}\n","/home/lenovo/Desktop/projects/cheddar-frontend/client/src/components/layout/GuestNav.js",[],{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","severity":1,"message":"188","line":98,"column":49,"nodeType":"189","messageId":"190","endLine":98,"endColumn":53},{"ruleId":"191","severity":1,"message":"192","line":3,"column":10,"nodeType":"193","messageId":"194","endLine":3,"endColumn":14},{"ruleId":"191","severity":1,"message":"195","line":13,"column":8,"nodeType":"193","messageId":"194","endLine":13,"endColumn":17},{"ruleId":"196","severity":1,"message":"197","line":33,"column":6,"nodeType":"198","endLine":33,"endColumn":12,"suggestions":"199"},{"ruleId":"196","severity":1,"message":"200","line":43,"column":6,"nodeType":"198","endLine":43,"endColumn":32,"suggestions":"201"},{"ruleId":"196","severity":1,"message":"202","line":56,"column":6,"nodeType":"198","endLine":56,"endColumn":25,"suggestions":"203"},{"ruleId":"196","severity":1,"message":"204","line":62,"column":6,"nodeType":"198","endLine":62,"endColumn":8,"suggestions":"205"},{"ruleId":"196","severity":1,"message":"206","line":68,"column":6,"nodeType":"198","endLine":68,"endColumn":8,"suggestions":"207"},{"ruleId":"196","severity":1,"message":"208","line":79,"column":6,"nodeType":"198","endLine":79,"endColumn":8,"suggestions":"209"},{"ruleId":"191","severity":1,"message":"210","line":4,"column":10,"nodeType":"193","messageId":"194","endLine":4,"endColumn":18},{"ruleId":"191","severity":1,"message":"211","line":7,"column":22,"nodeType":"193","messageId":"194","endLine":7,"endColumn":30},{"ruleId":"191","severity":1,"message":"212","line":1,"column":27,"nodeType":"193","messageId":"194","endLine":1,"endColumn":36},{"ruleId":"191","severity":1,"message":"195","line":2,"column":8,"nodeType":"193","messageId":"194","endLine":2,"endColumn":17},{"ruleId":"191","severity":1,"message":"213","line":30,"column":13,"nodeType":"193","messageId":"194","endLine":30,"endColumn":17},{"ruleId":"191","severity":1,"message":"214","line":30,"column":19,"nodeType":"193","messageId":"194","endLine":30,"endColumn":29},{"ruleId":"191","severity":1,"message":"195","line":2,"column":8,"nodeType":"193","messageId":"194","endLine":2,"endColumn":17},{"ruleId":"191","severity":1,"message":"215","line":12,"column":3,"nodeType":"193","messageId":"194","endLine":12,"endColumn":14},{"ruleId":"191","severity":1,"message":"216","line":9,"column":3,"nodeType":"193","messageId":"194","endLine":9,"endColumn":9},{"ruleId":"191","severity":1,"message":"217","line":12,"column":3,"nodeType":"193","messageId":"194","endLine":12,"endColumn":15},{"ruleId":"218","severity":1,"message":"219","line":94,"column":13,"nodeType":"220","endLine":94,"endColumn":17},{"ruleId":"191","severity":1,"message":"221","line":1,"column":27,"nodeType":"193","messageId":"194","endLine":1,"endColumn":35},{"ruleId":"191","severity":1,"message":"195","line":2,"column":8,"nodeType":"193","messageId":"194","endLine":2,"endColumn":17},{"ruleId":"191","severity":1,"message":"211","line":12,"column":3,"nodeType":"193","messageId":"194","endLine":12,"endColumn":11},{"ruleId":"187","severity":1,"message":"222","line":14,"column":5,"nodeType":"189","messageId":"190","endLine":14,"endColumn":10},{"ruleId":"183","replacedBy":"223"},{"ruleId":"185","replacedBy":"224"},{"ruleId":"191","severity":1,"message":"225","line":11,"column":8,"nodeType":"193","messageId":"194","endLine":11,"endColumn":18},{"ruleId":"191","severity":1,"message":"192","line":12,"column":10,"nodeType":"193","messageId":"194","endLine":12,"endColumn":14},{"ruleId":"191","severity":1,"message":"226","line":13,"column":8,"nodeType":"193","messageId":"194","endLine":13,"endColumn":30},"no-native-reassign",["227"],"no-negated-in-lhs",["228"],"no-dupe-keys","Duplicate key 'type'.","ObjectExpression","unexpected","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'PropTypes' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getConversations'. Either include it or remove the dependency array. If 'getConversations' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["229"],"React Hook useEffect has missing dependencies: 'conversations' and 'username'. Either include them or remove the dependency array.",["230"],"React Hook useEffect has missing dependencies: 'addEvent' and 'addNotification'. Either include them or remove the dependency array. If 'addEvent' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["231"],"React Hook useEffect has a missing dependency: 'addConversation'. Either include it or remove the dependency array. If 'addConversation' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["232"],"React Hook useEffect has a missing dependency: 'addOnline'. Either include it or remove the dependency array. If 'addOnline' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["233"],"React Hook useEffect has missing dependencies: 'clearTyping' and 'setTyping'. Either include them or remove the dependency array. If 'setTyping' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["234"],"'setAlert' is defined but never used.","'ListItem' is defined but never used.","'useEffect' is defined but never used.","'text' is assigned a value but never used.","'chatRoomId' is assigned a value but never used.","'ADD_OFFLINE' is defined but never used.","'Avatar' is defined but never used.","'ListItemIcon' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'useState' is defined but never used.","Duplicate key 'color'.",["227"],["228"],"'SearchIcon' is defined but never used.","'ConfirmationNumberIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},"Update the dependencies array to be: [auth, getConversations]",{"range":"247","text":"248"},"Update the dependencies array to be: [auth, chat.conversations, conversations, username]",{"range":"249","text":"250"},"Update the dependencies array to be: [addEvent, addNotification, chat.conversation]",{"range":"251","text":"252"},"Update the dependencies array to be: [addConversation]",{"range":"253","text":"254"},"Update the dependencies array to be: [addOnline]",{"range":"255","text":"256"},"Update the dependencies array to be: [clearTyping, setTyping]",{"range":"257","text":"258"},[698,704],"[auth, getConversations]",[942,968],"[auth, chat.conversations, conversations, username]",[1413,1432],"[addEvent, addNotification, chat.conversation]",[1603,1605],"[addConversation]",[1764,1766],"[addOnline]",[2049,2051],"[clearTyping, setTyping]"]