[{"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/index.js":"1","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/App.js":"2","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/store.js":"3","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/utils/setAuthToken.js":"4","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/auth/Login.js":"5","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/layout/Landing.js":"6","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/layout/Alert.js":"7","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/auth/Register.js":"8","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/routing/PrivateRoute.js":"9","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/layout/Navbar.js":"10","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/actions/auth.js":"11","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/actions/types.js":"12","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/chat/Chat.js":"13","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/actions/alert.js":"14","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/components/auth/LoginComp.js":"15","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/components/auth/RegisterComp.js":"16","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/actions/chat.js":"17","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/socketConfig.js":"18","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/components/chat/ChatComp.js":"19","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/reducers/index.js":"20","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/chat/Conversations.js":"21","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/chat/ConversationWindow.js":"22","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/reducers/alert.js":"23","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/reducers/auth.js":"24","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/reducers/chat.js":"25","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/components/chat/ConversationsComp.js":"26","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/components/chat/ConversationWindowComp.js":"27","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/chat/NewConversation.js":"28","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/components/chat/NewConversationComp.js":"29"},{"size":412,"mtime":1613729091926,"results":"30","hashOfConfig":"31"},{"size":1757,"mtime":1613759066387,"results":"32","hashOfConfig":"31"},{"size":1020,"mtime":1613729091926,"results":"33","hashOfConfig":"31"},{"size":326,"mtime":1613729091926,"results":"34","hashOfConfig":"31"},{"size":980,"mtime":1613759066383,"results":"35","hashOfConfig":"31"},{"size":1099,"mtime":1613760987000,"results":"36","hashOfConfig":"31"},{"size":439,"mtime":1613729091922,"results":"37","hashOfConfig":"31"},{"size":1526,"mtime":1613985006489,"results":"38","hashOfConfig":"31"},{"size":702,"mtime":1613729091922,"results":"39","hashOfConfig":"31"},{"size":1331,"mtime":1613729091922,"results":"40","hashOfConfig":"31"},{"size":1860,"mtime":1614083834749,"results":"41","hashOfConfig":"31"},{"size":1544,"mtime":1614093398758,"results":"42","hashOfConfig":"31"},{"size":1863,"mtime":1614115652599,"results":"43","hashOfConfig":"31"},{"size":344,"mtime":1613729091922,"results":"44","hashOfConfig":"31"},{"size":3576,"mtime":1613985097972,"results":"45","hashOfConfig":"31"},{"size":4669,"mtime":1613985068453,"results":"46","hashOfConfig":"31"},{"size":3909,"mtime":1614097064087,"results":"47","hashOfConfig":"31"},{"size":232,"mtime":1614083834753,"results":"48","hashOfConfig":"31"},{"size":1308,"mtime":1613987870584,"results":"49","hashOfConfig":"31"},{"size":188,"mtime":1613759066383,"results":"50","hashOfConfig":"31"},{"size":950,"mtime":1614097737464,"results":"51","hashOfConfig":"31"},{"size":1834,"mtime":1614083834749,"results":"52","hashOfConfig":"31"},{"size":402,"mtime":1613729091926,"results":"53","hashOfConfig":"31"},{"size":1079,"mtime":1613975491545,"results":"54","hashOfConfig":"31"},{"size":3421,"mtime":1614104194618,"results":"55","hashOfConfig":"31"},{"size":3237,"mtime":1614083834749,"results":"56","hashOfConfig":"31"},{"size":7770,"mtime":1614083834749,"results":"57","hashOfConfig":"31"},{"size":919,"mtime":1613986571618,"results":"58","hashOfConfig":"31"},{"size":1266,"mtime":1613991256175,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"fjuild",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"62"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"62"},"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/index.js",[],["128","129"],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/App.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/store.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/utils/setAuthToken.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/auth/Login.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/layout/Landing.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/layout/Alert.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/auth/Register.js",["130"],"import React, { Fragment, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { setAlert } from '../../actions/alert';\nimport { register } from '../../actions/auth';\nimport PropTypes from 'prop-types';\nimport RegisterComp from \"../../components/auth/RegisterComp\";\n\nconst Register = ({ setAlert, register, isAuthenticated }) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    username:'',\n    email: '',\n    password: '',\n    password2: '',\n\n  });\n\n  const { name,username, email, password, password2 } = formData;\n\n  const onChange = e =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    if (password !== password2) {\n      setAlert('Passwords do not match', 'danger');\n    } else {\n      register({ name,username, email, password});\n      console.log('fjhdjh');\n    }\n  };\n\n  if (isAuthenticated) {\n    return <Redirect to='/chat' />;\n  }\n\n  return (\n    <Fragment>\n      <div className=\"\">\n        <RegisterComp\n          onChange={onChange}\n          onSubmit={onSubmit}\n          formData={formData}\n        />\n      </div>\n    </Fragment>\n\n  );\n};\n\nRegister.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  register: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool,\n  \n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps, { setAlert, register})(Register);\n","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/routing/PrivateRoute.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/layout/Navbar.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/actions/auth.js",["131"],"// import api from '../utils/api';\nimport axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\n\nimport { setAlert } from './alert';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_CHAT,\n} from './types';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  try {\n   \n    if(localStorage.token){\n      setAuthToken(localStorage.token)\n  }\n const res = await axios.get('/api/auth');\n   \n    console.log('load_user()', res.data);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.log('Load_use()', err);\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n// Register User\nexport const register = formData => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    const res = await axios.post('/api/user', formData, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data,\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n\n// Login User\nexport const login = (body) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  \n\n  try {\n    console.log('hi')\n    const res = await axios.post('/api/auth', body, config);\n\n    // const res={data:'hi'}\n    console.log(res.data)\n    await dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    console.log(err);\n    \n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\n// Logout\nexport const logout = () => ({ type:CLEAR_CHAT, type: LOGOUT });\n","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/actions/types.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/chat/Chat.js",["132","133","134","135","136","137"],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/actions/alert.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/components/auth/LoginComp.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/components/auth/RegisterComp.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/actions/chat.js",["138"],"// import api from '../utils/api';\nimport axios from \"axios\";\n\nimport { setAlert } from \"./alert\";\nimport {\n  GET_CONVERSATIONS,\n  GET_CONVERSATIONS_ERROR,\n  NEW_CONVERSATION,\n  NEW_CONVERSATION_ERROR,\n  SET_CONVERSATION,\n  SET_CONVERSATION_ERROR,\n  GET_EVENTS,\n  GET_EVENTS_ERROR,\n  NEW_EVENT,\n  NEW_EVENT_ERROR,\n  ADD_CONVERSATION,\n  ADD_CONVERSATION_ERROR,\n  ADD_EVENT_ERROR,\n  ADD_EVENT,\n  ADD_NOTIFICATION,\n  ADD_NOTIFICATION_ERROR,\n  ADD_ONLINE,\n  ADD_OFFLINE,\n  ADD_STATUS_ERROR\n\n\n} from \"./types\";\n\n// Load User\nexport const getConversations = () => async (dispatch) => {\n  try {\n    const res = await axios.get(\"/api/user/conversations\");\n    console.log(\"load_user()\", res.data);\n    dispatch({\n      type: GET_CONVERSATIONS,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.log(\"Load_use()\", err);\n    dispatch({\n      type: GET_CONVERSATIONS_ERROR,\n    });\n  }\n};\n\nexport const newConversation = (body) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n    const res = await axios.post(\"/api/user/newConversation\", body, config);\n\n    console.log(\"load_user()\", res.data);\n    dispatch({\n      type: NEW_CONVERSATION,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.log(\"Load_use()\", err);\n    dispatch({\n      type: NEW_CONVERSATION_ERROR,\n    });\n  }\n};\n\nexport const setConversation = (conversation) => async (dispatch) => {\n  try {\n    dispatch({\n      type: SET_CONVERSATION,\n      payload: conversation,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: SET_CONVERSATION_ERROR,\n    });\n  }\n};\n\nexport const getEvents = (chatId,username) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const timestamp = null;\n  const body = { chatRoomId: chatId, timestamp: timestamp, username:username};\n  console.log(body);\n\n  try {\n    const res = await axios.post(\"/api/event/getEvents\", body, config);\n    console.log(res.data);\n    dispatch({\n      type: GET_EVENTS,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: GET_EVENTS_ERROR,\n    });\n  }\n};\n\nexport const newEvent = (body) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  console.log(body, \"In newEvent jiiiiiiiiiiii\");\n  try {\n    const res = await axios.post(\"/api/event/newEvent\", body, config);\n    //socket event\n\n    dispatch({\n      type: NEW_EVENT,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: NEW_EVENT_ERROR,\n    });\n  }\n};\n\nexport const addConversation = (body) => async (dispatch) => {\n  console.log(\"In add Conversation \");\n  try {\n    dispatch({\n      type: ADD_CONVERSATION,\n      payload: body,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: ADD_CONVERSATION_ERROR,\n    });\n  }\n};\nexport const addEvent = (body) => async (dispatch) => {\n  try {\n    dispatch({\n      type: ADD_EVENT,\n      payload: body,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: ADD_EVENT_ERROR,\n    });\n  }\n};\n\n\nexport const addNotification = (body) => async (dispatch) => {\n  try {\n    dispatch({\n      type: ADD_NOTIFICATION,\n      payload: body,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: ADD_NOTIFICATION_ERROR,\n    });\n  }\n};\n\nexport const addOnline = (body) => async (dispatch) => {\n  try {\n    dispatch({\n      type: ADD_ONLINE,\n      payload: body,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: ADD_STATUS_ERROR,\n    });\n  }\n};\n\nexport const addOffline = (body) => async (dispatch) => {\n  try {\n    dispatch({\n      type: ADD_OFFLINE,\n      payload: body,\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: ADD_STATUS_ERROR,\n    });\n  }\n};\n\n","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/socketConfig.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/components/chat/ChatComp.js",["139"],"import React from 'react'\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Conversations from '../../containers/chat/Conversations';\n\nimport ConversationWindow from '../../containers/chat/ConversationWindow';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    table: {\n      minWidth: 650,\n    },\n    chatSection: {\n      width: '100%',\n      height: '80vh'\n    },\n    headBG: {\n        backgroundColor: '#e0e0e0'\n    },\n    borderRight500: {\n        borderRight: '1px solid #e0e0e0',\n  \n        backgroundColor: '#0000e0'\n    },\n    messageArea: {\n      height: '70vh',\n      overflowY: 'auto'\n    }\n  });\nconst ChatComp = props => {\n    const classes = useStyles();\n    return (\n        <div>\n        <Grid container>\n            {/* <Grid item xs={12} >\n                <Typography variant=\"h5\" className=\"header-message\">Chat</Typography>\n            </Grid> */}\n        </Grid>\n        <Grid container component={Paper} className={classes.chatSection}>\n        \n            <Conversations></Conversations>\n            <ConversationWindow></ConversationWindow>\n            \n        </Grid>\n      </div>\n    )\n}\n\nChatComp.propTypes = {\n\n}\n\nexport default ChatComp\n","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/reducers/index.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/chat/Conversations.js",["140"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ConversationsComp from \"../../components/chat/ConversationsComp\";\nimport { connect } from \"react-redux\";\nimport { setConversation, getEvents } from \"../../actions/chat\";\nfunction Conversations({ chat, auth, setConversation, getEvents }) {\n  const onClick = (conversation) => {\n    const username =\n      conversation.recipients[0].username === auth.user.username\n        ? conversation.recipients[1].username\n        : conversation.recipients[0].name;\n        \n    setConversation(conversation);\n    getEvents(conversation._id, username);\n  };\n  return (\n    <ConversationsComp\n      conversations={chat.conversations}\n      auth={auth}\n      onClick={onClick}\n    />\n  );\n}\n\nConversations.propTypes = {};\nconst mapStateToProps = (state) => ({\n  chat: state.chat,\n  auth: state.auth,\n});\nexport default connect(mapStateToProps, { setConversation, getEvents })(\n  Conversations\n);\n","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/chat/ConversationWindow.js",["141","142","143","144"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ConversationWindowComp from '../../components/chat/ConversationWindowComp';\nimport { connect } from 'react-redux';\nimport { newEvent } from '../../actions/chat';\nimport socket from '../../socketConfig';\n\nfunction ConversationWindow({ chat, newEvent,auth }) {\n  const [formData, setFormData] = useState({\n    text: '',\n  });\n\n  const onChange = e => setFormData({ ...formData, text: e.target.value });\n\n  const onSubmit = () => {\n    formData.chatRoomId = chat.conversation._id;\n    formData.messageId= chat.events.length + 1;\n    formData.type= 'new';\n\n    console.log(chat.events.length,\"length\")\n    newEvent(formData);\n    const { text, chatRoomId } = formData;\n    \n    // socket.emit('newEvent', {formData});\n    setFormData({ ...formData, text: '' });\n  };\n  const editEvent=(text,eventPre)=>{\n    const event={};\n    console.log(text,eventPre);\n    event.chatRoomId = eventPre.chatRoomId;\n    event.messageId= eventPre.messageId\n    event.type= 'edit';\n    event.text=text;\n    newEvent(event);\n  }\n  const deleteEvent=(eventPre)=>{\n    const event={};\n    event.chatRoomId = eventPre.chatRoomId;\n    event.messageId= eventPre.messageId\n    event.type= 'delete';\n    event.text=\"This message was deleted\";\n    console.log(event,\"In sumbit delte event\")\n    newEvent(event);\n  }\n  return (\n    <ConversationWindowComp\n    events={chat.events}\n      conversation={chat.conversation}\n      formData={formData}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      auth={auth}\n      deleteEvent={deleteEvent}\n      editEvent={editEvent}\n    />\n  );\n}\n\nConversationWindow.propTypes = {};\n\nconst mapStateToProps = state => ({\n  chat: state.chat,\n  auth: state.auth,\n});\nexport default connect(mapStateToProps, { newEvent })(ConversationWindow);\n","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/reducers/alert.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/reducers/auth.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/reducers/chat.js",["145"],"import {\n  NEW_CONVERSATION,\n  GET_CONVERSATIONS,\n  SET_CONVERSATION,\n  GET_EVENTS,\n  NEW_EVENT,\n  ADD_CONVERSATION,\n  ADD_EVENT,\n  CLEAR_CHAT,\n  ADD_NOTIFICATION,\n  ADD_ONLINE,\n  ADD_OFFLINE,\n} from \"../actions/types\";\n\nconst initialState = {\n  conversations: [],\n  conversation: null,\n  events: [],\n  newEvents: [],\n  loading: true,\n  notifications: [],\n  onlineUser: \"offline\",\n};\n\nfunction chatReducer(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_CONVERSATIONS:\n      return {\n        ...state,\n        conversations: payload,\n        loading: false,\n      };\n    case SET_CONVERSATION: {\n      state.notifications = state.notifications.filter(\n        (notification) => notification !== payload._id\n      );\n      return {\n        ...state,\n        conversation: payload,\n        loading: false,\n        onlineUser: \"offline\",\n      };\n    }\n    case NEW_CONVERSATION: {\n      state.conversations = state.conversations.filter(\n        (conversation) => conversation._id !== payload._id\n      );\n      console.log(payload);\n      return {\n        ...state,\n        conversations: [payload, ...state.conversations],\n        loading: false,\n      };\n    }\n    case GET_EVENTS: {\n      payload.sort((a, b) =>\n        a.messageId > b.messageId ? 1 : b.messageId > a.messageId ? -1 : 0\n      );\n      return {\n        ...state,\n        events: payload,\n        loading: false,\n        // whenever he refreshes this should get called\n      };\n    }\n    case NEW_EVENT: {\n      // reducer newEvents -> events\n      console.log(payload, \"In redcer of delete event\");\n\n      if (payload.type !== \"new\") {\n        console.log(\"Edit/Delete\");\n        console.log(state.events, \"1stt\");\n        state.events[payload.messageId - 1] = payload;\n        console.log(state.events, \"2ndd\");\n        return {\n          ...state,\n        };\n      } else {\n        return {\n          ...state,\n          events: [...state.events, payload],\n        };\n      }\n    }\n    case ADD_CONVERSATION: {\n      console.log(payload);\n      return {\n        ...state,\n        conversations: [payload, ...state.conversations],\n      };\n    }\n    case ADD_EVENT: {\n      // filter if not type == new\n      console.log(payload);\n      if (payload.type !== \"new\") {\n        console.log(\"Edit/Delete\");\n        state.events[payload.messageId - 1] = payload;\n        return {\n          ...state,\n        };\n      } else {\n        return {\n          ...state,\n          events: [...state.events, payload],\n        };\n      }\n    }\n    case ADD_NOTIFICATION: {\n      const notifiedConvo = state.conversations.filter(\n        (convo) => convo._id === payload\n      );\n      state.conversations = state.conversations.filter(\n        (convo) => convo._id !== payload\n      );\n      state.notifications = state.notifications.filter(\n        (notification) => notification !== payload\n      );\n      return {\n        ...state,\n        notifications: [payload, ...state.notifications],\n        conversations: [notifiedConvo[0], ...state.conversations],\n      };\n    }\n    case ADD_ONLINE: {\n      return {\n        ...state,\n        onlineUser: payload,\n      };\n    }\n    case CLEAR_CHAT: {\n      return {\n        conversations: [],\n        conversation: null,\n        events: [],\n        newEvents: [],\n        loading: true,\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default chatReducer;\n","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/components/chat/ConversationsComp.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/components/chat/ConversationWindowComp.js",["146","147"],"import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport moment from 'moment';\nimport Typography from '@material-ui/core/Typography';\n\nimport {\n  Grid,\n  List,\n  ListItem,\n  Divider,\n  ListItemText,\n  TextField,\n  Fab,\n  Button,\n  Dialog,\n  DialogTitle,\n} from '@material-ui/core';\nimport SendIcon from '@material-ui/icons/Send';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n  chatSection: {\n    width: '100%',\n    height: '80vh',\n  },\n  headBG: {\n    backgroundColor: '#e0e0e0',\n  },\n  borderRight500: {\n    borderRight: '1px solid #e0e0e0',\n\n    backgroundColor: '#0000e0',\n  },\n  messageArea: {\n    height: '70vh',\n    overflowY: 'auto',\n    border: '1px solid #e0e0e0',\n  },\n  message: {\n    marginRight: '40%',\n    marginLeft: '5%',\n    marginTop: '1%',\n    border: '1px solid #e0e0e0',\n    background: 'light',\n  },\n  editButton: { color: 'green' },\n  deleteButton: { color: 'red' },\n});\n\nconst ConversationWindowComp = ({\n  events,\n  conversation,\n  auth,\n  onChange,\n  onSubmit,\n  formData,\n  editEvent,\n  deleteEvent,\n}) => {\n  const classes = useStyles();\n  const { text } = formData;\n  const [openEdit, setOpenEdit] = React.useState({\n    open: false,\n    singleEvent: null,\n    editText: '',\n  });\n\n  const handleClickOpenEdit = singleEventProp => {\n\n    console.log(singleEventProp.text)\n    setOpenEdit({ ...openEdit, open: true, singleEvent: singleEventProp ,editText: singleEventProp.text});\n    \n\n  };\n  const onChangeEditText = e => {\n    console.log(openEdit.editText)\n    setOpenEdit({ ...openEdit, editText: e.target.value });\n  };\n  \n\n  const handleCloseEdit = () => {\n    setOpenEdit({ ...openEdit, open: false });\n  };\n  const [openDelete, setOpenDelete] = React.useState({\n    open: false,\n    singleEvent: null,\n  });\n\n  const handleClickOpenDelete = singleEvent => {\n    setOpenDelete({ ...openDelete, open: true, singleEvent: singleEvent });\n  };\n\n  const handleCloseDelete = () => {\n    setOpenDelete({ ...openDelete, open: false });\n  };\n  if (conversation) {\n    return (\n      <Fragment>\n        <Grid item xs={10}>\n          <List className={classes.messageArea}>\n            {events.map(event => (\n              <Grid container className={classes.message}>\n                <Grid item xs={9}>\n                  <ListItemText>\n                    <Typography gutterBottom variant='h7' component='h3'>\n                      {event.sender}\n                    </Typography>\n                    <Typography gutterBottom variant='h8'>\n                      {moment(event.date).format('LT')}\n                    </Typography>\n                  </ListItemText>\n                  <Typography gutterBottom variant='h7'>\n                    {event.text}\n                  </Typography>\n                </Grid>\n                <Grid item xs={1}>\n                  {event.sender === auth.user._id && (\n                    <Fragment>\n                      <Button\n                        className={classes.editButton}\n                        onClick={() => handleClickOpenEdit(event)}\n                      >\n                        EDIT\n                      </Button>\n\n                      <Button\n                        className={classes.deleteButton}\n                        onClick={() => handleClickOpenDelete(event)}\n                      >\n                        {' '}\n                        DELETE\n                      </Button>\n                    </Fragment>\n                  )}\n                </Grid>\n              </Grid>\n            ))}\n            <Dialog\n              onClose={handleCloseDelete}\n              aria-labelledby='customized-dialog-title'\n              open={openDelete.open}\n            >\n              <DialogTitle\n                id='customized-dialog-title'\n                onClose={handleCloseDelete}\n              >\n                <h4>Delete this Message</h4>\n                {/* {console.log()} */}\n                <Button\n                  onClick={() => {\n                    deleteEvent(openDelete.singleEvent);\n                  }}\n                >\n                  {' '}\n                  Sure?\n                </Button>\n              </DialogTitle>\n            </Dialog>\n            <Dialog\n              onClose={handleCloseEdit}\n              aria-labelledby='customized-dialog-title'\n              open={openEdit.open}\n            >\n              <DialogTitle\n                id='customized-dialog-title'\n                onClose={handleCloseEdit}\n              >\n                Edit this Message\n                <Grid container style={{ padding: '10px' }}>\n                  <Grid item xs={11}>\n                    <TextField\n                      id='outlined-basic-email'\n                   \n                      fullWidth\n                      value={openEdit.editText}\n                      onChange={onChangeEditText}\n                    ></TextField>\n                  </Grid>\n                  <Grid xs={1} align='right'>\n                    <Fab\n                      color='primary'\n                      aria-label='add'\n                      onClick={() => {\n                        \n                        editEvent(openEdit.editText,openEdit.singleEvent);\n                      }}\n                    >\n                      <SendIcon />\n                    </Fab>\n                  </Grid>\n                </Grid>\n              </DialogTitle>\n            </Dialog>\n            {/* <ListItem key='1'>\n              <Grid container>\n                <Grid item xs={12}>\n                  <ListItemText\n                    align='right'\n                    primary=\"Hey man, What's up ?\"\n                  ></ListItemText>\n                </Grid>\n                <Grid item xs={12}>\n                  <ListItemText align='right' secondary='09:30'></ListItemText>\n                </Grid>\n              </Grid>\n            </ListItem> */}\n            {/* <ListItem key='2'>\n              <Grid container>\n                <Grid item xs={12}>\n                  <ListItemText\n                    align='left'\n                    primary='Hey, Iam Good! What about you ?'\n                  ></ListItemText>\n                </Grid>\n                <Grid item xs={12}>\n                  <ListItemText align='left' secondary='09:31'></ListItemText>\n                </Grid>\n              </Grid>\n            </ListItem> */}\n            {/* <ListItem key='3'>\n              <Grid container>\n                <Grid item xs={12}>\n                  <ListItemText\n                    align='right'\n                    primary=\"Cool. i am good, let's catch up!\"\n                  ></ListItemText>\n                </Grid>\n                <Grid item xs={12}>\n                  <ListItemText align='right' secondary='10:30'></ListItemText>\n                </Grid>\n              </Grid>\n            </ListItem> */}\n          </List>\n          <Divider />\n          <Grid container style={{ padding: '10px' }}>\n            <Grid item xs={11}>\n              <TextField\n                id='outlined-basic-email'\n                label='Type Something'\n                fullWidth\n                value={text}\n                onChange={onChange}\n              ></TextField>\n            </Grid>\n            <Grid xs={1} align='right'>\n              <Fab\n                color='primary'\n                aria-label='add'\n                onClick={() => {\n                  onSubmit();\n                }}\n              >\n                <SendIcon />\n              </Fab>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Fragment>\n    );\n  } else {\n    return <Fragment> No Conversation Selected </Fragment>;\n  }\n};\n\nConversationWindowComp.propTypes = {};\n\nexport default ConversationWindowComp;\n","/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/containers/chat/NewConversation.js",[],"/home/lenovo/mernProjects/cheddar/frontend/cheddar-frontend/src/components/chat/NewConversationComp.js",["148"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Grid } from \"@material-ui/core\";\nconst useStyles = makeStyles({});\nconst NewConversationComp = ({ formData, onChange, onSubmit }) => {\n  const { username } = formData;\n  const classes = useStyles();\n\n  return (\n    <div>\n      <form noValidate onSubmit={onSubmit}>\n        <Grid item xs={12} style={{ padding: \"10px\",color:\"white\" }}>\n          <TextField\n            name=\"username\"\n            id=\"outlined-basic-email\"\n            label=\"Search\"\n            variant=\"outlined\"\n            fullWidth\n            value={username}\n            onChange={onChange}\n            color=\"white\"\n          />\n        </Grid>\n        <Grid item xs={12} style={{ padding: \"10px\" }}>\n          \n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              value=\"Register\"\n            ><SearchIcon/></Button>\n          \n        </Grid>\n      </form>\n    </div>\n  );\n};\n\nNewConversationComp.propTypes = {};\n\nexport default NewConversationComp;\n",{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":3,"column":10,"nodeType":"155","messageId":"156","endLine":3,"endColumn":14},{"ruleId":"157","severity":1,"message":"158","line":98,"column":49,"nodeType":"159","messageId":"160","endLine":98,"endColumn":53},{"ruleId":"153","severity":1,"message":"161","line":11,"column":8,"nodeType":"155","messageId":"156","endLine":11,"endColumn":17},{"ruleId":"162","severity":1,"message":"163","line":27,"column":6,"nodeType":"164","endLine":27,"endColumn":8,"suggestions":"165"},{"ruleId":"162","severity":1,"message":"166","line":36,"column":6,"nodeType":"164","endLine":36,"endColumn":32,"suggestions":"167"},{"ruleId":"162","severity":1,"message":"168","line":48,"column":6,"nodeType":"164","endLine":48,"endColumn":25,"suggestions":"169"},{"ruleId":"162","severity":1,"message":"170","line":54,"column":6,"nodeType":"164","endLine":54,"endColumn":8,"suggestions":"171"},{"ruleId":"162","severity":1,"message":"172","line":60,"column":6,"nodeType":"164","endLine":60,"endColumn":8,"suggestions":"173"},{"ruleId":"153","severity":1,"message":"174","line":4,"column":10,"nodeType":"155","messageId":"156","endLine":4,"endColumn":18},{"ruleId":"153","severity":1,"message":"175","line":4,"column":8,"nodeType":"155","messageId":"156","endLine":4,"endColumn":18},{"ruleId":"153","severity":1,"message":"161","line":2,"column":8,"nodeType":"155","messageId":"156","endLine":2,"endColumn":17},{"ruleId":"153","severity":1,"message":"161","line":2,"column":8,"nodeType":"155","messageId":"156","endLine":2,"endColumn":17},{"ruleId":"153","severity":1,"message":"176","line":6,"column":8,"nodeType":"155","messageId":"156","endLine":6,"endColumn":14},{"ruleId":"153","severity":1,"message":"177","line":22,"column":13,"nodeType":"155","messageId":"156","endLine":22,"endColumn":17},{"ruleId":"153","severity":1,"message":"178","line":22,"column":19,"nodeType":"155","messageId":"156","endLine":22,"endColumn":29},{"ruleId":"153","severity":1,"message":"179","line":12,"column":3,"nodeType":"155","messageId":"156","endLine":12,"endColumn":14},{"ruleId":"153","severity":1,"message":"161","line":2,"column":8,"nodeType":"155","messageId":"156","endLine":2,"endColumn":17},{"ruleId":"153","severity":1,"message":"180","line":10,"column":3,"nodeType":"155","messageId":"156","endLine":10,"endColumn":11},{"ruleId":"153","severity":1,"message":"181","line":11,"column":9,"nodeType":"155","messageId":"156","endLine":11,"endColumn":16},"no-native-reassign",["182"],"no-negated-in-lhs",["183"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'type'.","ObjectExpression","unexpected","'PropTypes' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getConversations'. Either include it or remove the dependency array. If 'getConversations' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["184"],"React Hook useEffect has missing dependencies: 'conversations' and 'username'. Either include them or remove the dependency array.",["185"],"React Hook useEffect has missing dependencies: 'addEvent' and 'addNotification'. Either include them or remove the dependency array. If 'addEvent' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["186"],"React Hook useEffect has a missing dependency: 'addConversation'. Either include it or remove the dependency array. If 'addConversation' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["187"],"React Hook useEffect has a missing dependency: 'addOnline'. Either include it or remove the dependency array. If 'addOnline' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["188"],"'setAlert' is defined but never used.","'Typography' is defined but never used.","'socket' is defined but never used.","'text' is assigned a value but never used.","'chatRoomId' is assigned a value but never used.","'ADD_OFFLINE' is defined but never used.","'ListItem' is defined but never used.","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},"Update the dependencies array to be: [getConversations]",{"range":"199","text":"200"},"Update the dependencies array to be: [auth, chat.conversations, conversations, username]",{"range":"201","text":"202"},"Update the dependencies array to be: [addEvent, addNotification, chat.conversation]",{"range":"203","text":"204"},"Update the dependencies array to be: [addConversation]",{"range":"205","text":"206"},"Update the dependencies array to be: [addOnline]",{"range":"207","text":"208"},[590,592],"[getConversations]",[831,857],"[auth, chat.conversations, conversations, username]",[1262,1281],"[addEvent, addNotification, chat.conversation]",[1452,1454],"[addConversation]",[1613,1615],"[addOnline]"]